#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2016 Carl Oliveros and Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 09 June 2014 15:00 PDT (-0700)
"""

import os
import argparse
import configparser

from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC

from phyluce.log import setup_logging
from phyluce.helpers import (
    is_dir,
    is_file,
    get_alignment_files,
    get_file_extensions,
    FullPaths,
    CreateDir,
)


import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Format a monolithic NCBI fasta file for tbl2asn from alignments"""
    )
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        help="""The directory containing alignments""",
    )
    parser.add_argument(
        "--conf", required=True, type=is_file, help="""The config file name"""
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The directory in which to store output files""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=[
            "fasta",
            "nexus",
            "phylip",
            "phylip-relaxed",
            "clustal",
            "emboss",
            "stockholm",
        ],
        default="nexus",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def get_new_identifier(
    sample, species, uce, partial, counter, metadata, voucher, biosample
):
    title = "{0} {1} ultra-conserved element locus {2}".format(
        species, voucher, uce
    )
    metad = {
        "counter": counter,
        "partial": partial,
        "title": title,
        "organism": "{0}".format(species),
        "moltype": "{0}".format(metadata["moltype"]),
        "specimen_voucher": "{0}".format(voucher),
        "bioproject": "{0}".format(metadata["bioproject"]),
        "biosample": "{0}".format(biosample),
    }
    # pdb.set_trace()
    if metad["specimen_voucher"] != "None":
        new_identifier = "{counter}{partial} [organism={organism}] [moltype={moltype}] [specimen-voucher={specimen_voucher}] [BioProject={bioproject}] [BioSample={biosample}] {title}".format(
            **metad
        )
    else:
        new_identifier = "{counter}{partial} [organism={organism}] [moltype={moltype}] [BioProject={bioproject}] [BioSample={biosample}] {title}".format(
            **metad
        )
    return new_identifier


def open_files(samples, outdir):
    fsa = {}
    tbl = {}
    for s in samples:
        fsa_file = open(os.path.join(outdir, s + ".fsa"), "w")
        tbl_file = open(os.path.join(outdir, s + ".tbl"), "w")
        fsa[s] = fsa_file
        tbl[s] = tbl_file
    return fsa, tbl


def get_excludes(conf, sec):
    if conf.has_section(sec):
        excludes = [i[0] for i in conf.items(sec)]
    else:
        return []
    return excludes


def get_biosamples(conf):
    if conf.has_section("biosamples"):
        return dict(conf.items("biosamples"))
    else:
        return None


def get_vouchers(conf):
    if conf.has_section("vouchers"):
        return dict(conf.items("vouchers"))
    else:
        return None


def get_metadata(conf):
    return dict(conf.items("metadata"))


def get_organisms(conf):
    if conf.has_section("organisms"):
        return dict(conf.items("organisms"))
    else:
        return None


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    conf = configparser.ConfigParser(allow_no_value=True)
    conf.optionxform = str
    conf.read(args.conf)
    # get alignments
    alignments = get_alignment_files(log, args.alignments, args.input_format)
    # get remapped names
    organisms = get_organisms(conf)
    # get metadata from conf file
    metadata = get_metadata(conf)
    vouchers = get_vouchers(conf)
    biosamples = get_biosamples(conf)
    # get our excludes
    taxon_excludes = get_excludes(conf, "exclude taxa")
    locus_excludes = get_excludes(conf, "exclude loci")
    if len(taxon_excludes) > 0:
        log.warn("Excluding samples: {}".format(", ".join(taxon_excludes)))
    if len(locus_excludes) > 0:
        log.warn("Excluding loci: {}".format(",".join(locus_excludes)))
    # setup counter for unique ID
    counter = 0
    log.info("Parsing alignments")
    fsafiles, tblfiles = open_files(list(organisms.keys()), args.output)
    for f in alignments:
        uce = os.path.splitext(os.path.basename(f))[0]
        if uce not in locus_excludes:
            for seq in AlignIO.read(f, args.input_format):
                # get species name
                sample = seq.id
                # skip taxa in exclude list
                if (
                    sample in taxon_excludes
                    or sample.lower() in taxon_excludes
                ):
                    pass
                else:
                    species = organisms[sample].capitalize()
                    partial = species.split(" ")[0].lower()[:3]
                    # process fsa file record
                    new_id = get_new_identifier(
                        sample,
                        species,
                        uce,
                        partial,
                        counter,
                        metadata,
                        vouchers[sample],
                        biosamples[sample],
                    )
                    new_seq = (
                        str(seq.seq).replace("-", "").replace("?", "").upper()
                    )
                    new_record = SeqRecord(
                        Seq(new_seq, IUPAC.IUPACAmbiguousDNA()),
                        id=new_id,
                        name="",
                        description="",
                    )
                    fsafiles[sample].write(new_record.format("fasta"))
                    # process tbl file record
                    tbl_record = ">Feature {0}{1}\n<1\t>{2}\tmisc_feature\n\t\t\tnote\tultra-conserved element locus {3}\n".format(
                        counter, partial, len(new_seq), uce
                    )
                    tblfiles[sample].write(tbl_record)
                    counter += 1
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
