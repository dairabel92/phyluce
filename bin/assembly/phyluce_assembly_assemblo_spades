#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2015 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 02 June 2013 10:06 PDT (-0700)
"""
import os
import glob
import shutil
import argparse
import subprocess

from phyluce.helpers import FullPaths, is_dir, is_file
from phyluce.raw_reads import get_input_data, get_input_files
from phyluce.log import setup_logging
from phyluce.pth import get_user_path, get_user_param

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Assemble raw reads using SPAdes"""
    )
    parser.add_argument(
        "--output",
        required=True,
        action=FullPaths,
        default=None,
        help="""The directory in which to store the assembly data""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""The number of compute cores/threads to run with SPAdes""",
    )
    parser.add_argument(
        "--memory",
        type=int,
        default=8,
        help="""The amount of RAM (in GB) to use with SPAdes""",
    )
    parser.add_argument(
        "--subfolder",
        type=str,
        default="",
        help="""A subdirectory, below the level of the group, containing the reads""",
    )
    parser.add_argument(
        "--no-clean",
        action="store_true",
        default=False,
        help="""Do not discard intermediate Spades files""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    # one of these is required.  The other will be set to None.
    input_data = parser.add_mutually_exclusive_group(required=True)
    input_data.add_argument(
        "--config",
        type=is_file,
        action=FullPaths,
        default=None,
        help="""A configuration file containing reads to assemble""",
    )
    input_data.add_argument(
        "--dir",
        type=is_dir,
        action=FullPaths,
        default=None,
        help="""A directory of reads to assemble""",
    )
    return parser.parse_args()


def run_spades_pe(spades, reads, sample_dir, memory, cores, log):
    log.info("Running SPAdes for PE data")
    # we're using "single-cell" mode here due to coverage variance
    # spades.py --careful
    #   --sc
    #   --threads 12
    #   --memory 62
    #   --cov-cutoff auto
    #   --pe1-1 read1
    #   --pe1-2 read2
    #   --pe1-s singleton
    #   -o assembly
    cmd = [
        spades,
        "--careful",
        "--sc",
        "--memory",
        str(int(memory)),
        "--threads",
        str(cores),
        "--cov-cutoff",
        get_user_param("spades", "cov_cutoff"),
        "--pe1-1",
        os.path.join(reads.r1.dir, reads.r1.file),
        "--pe1-2",
        os.path.join(reads.r2.dir, reads.r2.file),
        "-o",
        sample_dir,
    ]
    if reads.singleton:
        cmd.extend(
            [
                "--pe1-s",
                os.path.join(reads.singleton.dir, reads.singleton.file),
            ]
        )
    try:
        proc = subprocess.Popen(cmd)
        proc.communicate()
    except:
        log.critical("Could not assemble {}".format(sample_dir))
    return sample_dir


def generate_symlinks(contig_dir, sample_dir, sample, reads, log):
    log.info("Symlinking assembled contigs into {}".format(contig_dir))
    try:
        spades_fname = os.path.join(sample_dir, "contigs.fasta")
        # create a link btw. ../contigs/genus-species.contigs.fasta -> Trinity.fasta
        relpth = os.path.relpath(spades_fname, contig_dir)
        contig_lname = os.path.join(contig_dir, sample)
        os.symlink(relpth, "{}.contigs.fasta".format(contig_lname))
    except:
        log.warn(
            "Unable to symlink {} to {}".format(spades_fname, contig_lname)
        )


def cleanup_assembly_directory(pth, log):
    log.info("Removing extraneous assembly files")
    files = glob.glob(os.path.join(pth, "*"))
    # check the names to make sure we're not deleting something improperly
    names = [os.path.basename(f) for f in files]
    try:
        assert "scaffolds.fasta" in names
        assert "contigs.fasta" in names
        assert "spades.log" in names
        for file in files:
            if not os.path.basename(file) in (
                "scaffolds.fasta",
                "contigs.fasta",
                "spades.log",
            ):
                if os.path.isfile(file) or os.path.islink(file):
                    os.remove(file)
                elif os.path.isdir(file):
                    shutil.rmtree(file)
    except AssertionError:
        log.critical("Expected assembly files were not found in output.")


def main():
    # get args and options
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # get the input data
    log.info("Getting input filenames and creating output directories")
    input_data = get_input_data(args.config, args.dir)
    # create the output directory if it does not exist
    if not os.path.isdir(args.output):
        os.makedirs(args.output)
    else:
        pass
    # make the symlink directory within the output directory
    contig_dir = os.path.join(args.output, "contigs")
    if not os.path.isdir(contig_dir):
        os.makedirs(contig_dir)
    else:
        pass
    try:
        spades = get_user_path("binaries", "spades")

    except:
        raise EnvironmentError(
            "Cannot find SPAdes.  Ensure the $PATH is correctly entered in your phyluce.conf file."
        )
    for group in input_data:
        sample, dir = group
        # pretty print taxon status
        text = " Processing {} ".format(sample)
        log.info(text.center(65, "-"))
        # make a directory for sample-specific assemblies
        sample_name = "{0}_spades".format(sample)
        sample_dir = os.path.join(args.output, sample_name)
        os.makedirs(sample_dir)
        # determine how many files we're dealing with
        reads = get_input_files(dir, args.subfolder, log)
        # we don't need to combine singleton files here.  copy
        # the read data over and run the assembly for PE data
        if reads.r1 and reads.r2:
            run_spades_pe(
                spades, reads, sample_dir, args.memory, args.cores, log
            )
            if args.no_clean != True:
                cleanup_assembly_directory(sample_dir, log)
            # generate symlinks to assembled contigs
            generate_symlinks(contig_dir, sample_dir, sample, reads, log)
        elif reads.r1:
            log.critical("assemblo_spades will not run single-end data")
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
