#!/usr/bin/env python
# encoding: utf-8
"""
File: explode_get_fastas_file.py
Author: Brant Faircloth

Created by Brant Faircloth on 12 June 2013 23:06 PDT (-0700)
Copyright (c) 2013 Brant C. Faircloth. All rights reserved.

Description: Given the fasta file produced by get_fastas_from_match_counts.py,
explode that concatenated fasta file into many separate files, 1 per locus.

"""

import os
import sys
import argparse
from collections import defaultdict
from Bio import SeqIO
from phyluce.helpers import FullPaths

import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Explode the fasta file produced by get_fastas_from_match_counts into single files"""
    )
    parser.add_argument(
        "--input",
        required=True,
        action=FullPaths,
        help="""The input fasta file to explode""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=FullPaths,
        help="""The output directory to create and in which to store the fastas""",
    )
    parser.add_argument(
        "--by-taxon",
        action="store_true",
        default=False,
        help="""Split file by taxon and not by locus""",
    )
    parser.add_argument(
        "--split-char",
        type=str,
        default="_",
        help="""The character to split on""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    seqdict = defaultdict(list)
    if os.path.isdir(args.output):
        response = input(
            "{} exists.  Add results to directory [Y/n]? ".format(args.output)
        )
        if response == "Y":
            pass
        else:
            sys.exit()
    else:
        os.makedirs(args.output)
    print("Reading fasta...")
    if not args.by_taxon:
        with open(args.input, "rU") as input_file:
            for seq in SeqIO.parse(input_file, "fasta"):
                uce = seq.id.split(args.split_char)[0]
                seqdict[uce].append(seq)
    elif args.by_taxon:
        with open(args.input, "rU") as input_file:
            for seq in SeqIO.parse(input_file, "fasta"):
                taxon = "-".join(seq.id.split(args.split_char)[1:])
                seqdict[taxon].append(seq)
    print("Writing fasta...")
    for uce, sequences in seqdict.items():
        with open(
            os.path.join(args.output, "{}.unaligned.fasta".format(uce)), "w"
        ) as outf:
            for sequence in sequences:
                outf.write(sequence.format("fasta"))


if __name__ == "__main__":
    main()
