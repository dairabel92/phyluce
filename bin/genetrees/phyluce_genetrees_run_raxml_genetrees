#!/usr/bin/env python
# encoding: utf-8
"""
File: phyluce_genetrees_run_raxml_genetrees.py
Author: Brant Faircloth

Created by Brant Faircloth on 13 September 2012 18:09 PDT (-0700)
Copyright (c) 2012 Brant C. Faircloth. All rights reserved.

Updated 21 April 2015 by Carl Oliveros.

Description:  Searches for ML tree for each locus in a folder of
phylip-formatted alignments using RAxML
"""

import os
import re
import sys
import glob
import random
import argparse
import subprocess
import multiprocessing


from phyluce.helpers import is_dir, FullPaths, CreateDir
from phyluce.pth import get_user_path
from phyluce.log import setup_logging


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Performs ML tree search on a folder of phylip-formatted alignments using RAxML"""
    )
    parser.add_argument(
        "--input",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The input directory containing alignments in phylip format""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The output directory to hold alignments""",
    )
    parser.add_argument("--outgroup", type=str, help="""The outgroup to use""")
    parser.add_argument(
        "--threads",
        type=int,
        default=1,
        help="""The number of RAxML threads to run (best to determine empirically)""",
    )
    parser.add_argument(
        "--tree-searches",
        type=int,
        default=100,
        help="""The number of tree searches to run.""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""The number of concurrent RAxML jobs to run""",
    )
    parser.add_argument(
        "--quiet",
        action="store_true",
        default=False,
        help="""Suppress the CPU usage question""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def get_basic_raxml(alignment, tree_searches, outputdir):
    cmd = [
        get_user_path("binaries", "raxmlHPC-SSE3"),
        "-m",
        "GTRGAMMA",
        "-n",
        "best",
        "-s",
        alignment,
        "-N",
        str(tree_searches),
        "-p",
        str(random.randint(0, 1000000)),
        "-w",
        outputdir,
        "--no-bfgs",
    ]
    return cmd


def run_raxml(work):
    threads, output, outgroup, tree_searches, time, patterns, alignment = work
    # get the alignment name
    dirname = os.path.splitext(os.path.basename(alignment))[0]
    # make a directory for the alignment; raxml needs trailing slash
    outputdir = os.path.join(output, dirname) + "/"
    os.makedirs(outputdir)
    # get basic raxml call
    cmd = get_basic_raxml(alignment, tree_searches, outputdir)
    # add threads
    if threads > 1:
        # uncomment/edit below for threaded version
        cmd[0] = get_user_path("binaries", "raxmlHPC-PTHREADS-SSE3")
        cmd.extend(
            [
                "-T",
                str(threads),
            ]
        )
    # add outgroup
    if outgroup:
        cmd.extend(
            [
                "-o",
                outgroup,
            ]
        )
    process = subprocess.Popen(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    stdout, stderr = process.communicate()
    seconds = time.search(stdout).groups()[0]
    sites = patterns.search(stdout).groups()[0]
    sys.stdout.write(
        "name={0},seconds={1},sites={2}\n".format(dirname, seconds, sites)
    )
    sys.stdout.flush()
    return outputdir


def main():
    args = get_args()
    log, my_name = setup_logging(args)
    if args.cores == 1:
        args.cores = 1
        args.threads = 1
        correct_jobs = "Y"
    else:
        # get the number of jobs as available_procs / threads for raxml
        jobs = args.cores / args.threads
        question = (
            "The total number of cores in use is {0}. This will run \n"
            + "{1} concurrent jobs of {2} thread(s). Is this correct [Y/n]? "
        )
        if args.quiet:
            correct_jobs = "Y"
        else:
            correct_jobs = eval(
                input(question.format(args.cores, jobs, args.threads))
            )
    if correct_jobs == "Y":
        time = re.compile("Overall\sexecution\stime:\s(\d+\.\d+)\ssecs")
        patterns = re.compile("Alignment\sPatterns:\s(\d+)")
        alignments = []
        for ftype in (".phylip", ".phy", ".phylip-relaxed"):
            alignments.extend(
                glob.glob(os.path.join(args.input, "*{}".format(ftype)))
            )
        log.info("{0} alignments read".format(len(alignments)))
        work = [
            [
                args.threads,
                args.output,
                args.outgroup,
                args.tree_searches,
                time,
                patterns,
                alignment,
            ]
            for alignment in alignments
        ]
        if args.cores > 1:
            assert (
                jobs < multiprocessing.cpu_count()
            ), "The total number of jobs * threads is greather than the available CPUs"
            pool = multiprocessing.Pool(jobs)
            trees = pool.map(run_raxml, work)
        else:
            trees = list(map(run_raxml, work))
        output = open(os.path.join(args.output, "all-best-trees.tre"), "w")
        for treedir in trees:
            best_tree = open(
                os.path.join(treedir, "RAxML_bestTree.best"), "rb"
            ).read()
            output.write(best_tree)
        output.close()
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
