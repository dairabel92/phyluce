#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2015 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 15 June 2013 10:06 PDT (-0700)
"""

import os
import glob
import argparse
from Bio import AlignIO

from phyluce.log import setup_logging
from phyluce.helpers import (
    is_dir,
    FullPaths,
    get_file_extensions,
    get_alignment_files,
    CreateFile,
)
from collections import Counter

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Given an input directory of alignments, determine the number of alignments per taxon"""
    )
    parser.add_argument(
        "--alignments",
        required=True,
        action=FullPaths,
        type=is_dir,
        help="""The input directory of alignment files""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=["fasta", "nexus", "phylip", "clustal", "emboss", "stockholm"],
        default="fasta",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateFile,
        help="""The name of the CSV file to store the output""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    files = get_alignment_files(log, args.alignments, args.input_format)
    count = Counter()
    for f in files:
        aln = AlignIO.read(f, args.input_format)
        for seq in aln:
            if len(set(str(seq.seq))) > 1:
                count[seq.id] += 1
    log.info("Writing taxon count data to {}".format(args.output))
    with open(args.output, "w") as outfile:
        outfile.write("taxon,count\n")
        for taxon, cnt in count.items():
            outfile.write("{},{}\n".format(taxon, cnt))
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
