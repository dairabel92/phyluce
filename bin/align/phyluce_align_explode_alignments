#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2015 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 09 April 2015 14:20 CDT (-0500)
"""


import os
import sys
import glob
import argparse
import configparser
from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from phyluce.helpers import (
    get_file_extensions,
    is_dir,
    is_file,
    FullPaths,
    CreateDir,
)


# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Explode a directory of alignments into FASTA-formatted files for each locus or taxon"""
    )
    parser.add_argument(
        "--alignments",
        required=True,
        action=FullPaths,
        type=is_dir,
        help="""Input folder of alignments""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""Output folder of fasta files""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=["fasta", "nexus", "phylip", "clustal", "emboss", "stockholm"],
        default="fasta",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--conf",
        action=FullPaths,
        type=is_file,
        help="""Config file for renaming""",
    )
    parser.add_argument(
        "--section",
        type=str,
        help="""Section of config file to use""",
    )
    parser.add_argument(
        "--exclude",
        type=str,
        nargs="+",
        default=[],
        help="""Taxa/taxon to exclude""",
    )
    parser.add_argument(
        "--by-taxon",
        action="store_true",
        default=False,
        help="""Explode file by taxon instead of by-locus""",
    )
    parser.add_argument(
        "--include-locus",
        action="store_true",
        default=False,
        help="""Include the locus name in the FASTA header""",
    )
    return parser.parse_args()


def get_files(input_dir, input_format):
    extensions = get_file_extensions(input_format)
    files = []
    for ext in extensions:
        files.extend(
            glob.glob(
                os.path.join(os.path.expanduser(input_dir), "*{}*".format(ext))
            )
        )
    # ensure we collapse duplicate filenames
    return list(set(files))


def main():
    args = get_args()
    files = get_files(args.alignments, args.input_format)
    if args.conf:
        conf = configparser.ConfigParser()
        conf.read(args.conf)
        names = {
            item[0].replace(" ", "_"): item[1]
            for item in conf.items(args.section)
        }
        print("Original taxon count = ", len(list(names.keys())))
        for taxon in args.exclude:
            del names[taxon]
    # pdb.set_trace()
    if args.by_taxon:
        d = {}
        for file in files:
            sys.stdout.write(".")
            sys.stdout.flush()
            basename = os.path.basename(file)
            locus = os.path.splitext(basename)[0]
            aln = AlignIO.read(file, args.input_format)
            for taxon in aln:
                name = (
                    taxon.id.replace(locus, "").replace("_R_", "").lstrip("_")
                )
                if name not in args.exclude:
                    try:
                        shortname = names[name]
                    except:
                        shortname = name
                if shortname not in list(d.keys()):
                    new_file = shortname + ".fasta"
                    d[shortname] = open(
                        os.path.join(args.output, new_file), "w"
                    )
                seq = str(taxon.seq).replace("-", "")
                seq = str(seq).replace("?", "")
                if not len(seq) == 0:
                    if args.include_locus:
                        record = SeqRecord(
                            Seq(seq),
                            id="{0}_{1} |{0}".format(locus, taxon.id),
                            name="",
                            description="",
                        )
                        d[shortname].write("{}".format(record.format("fasta")))
                    else:
                        record = SeqRecord(
                            Seq(seq), id=taxon.id, name="", description=""
                        )
                        d[shortname].write("{}".format(record.format("fasta")))
        for k, v in d.items():
            v.close()
    else:
        for file in files:
            sys.stdout.write(".")
            sys.stdout.flush()
            basename = os.path.basename(file)
            locus = os.path.splitext(basename)[0]
            new_file = locus + ".fasta"
            taxon_count = []
            # pdb.set_trace()
            outp = open(os.path.join(args.output, new_file), "w")
            aln = AlignIO.read(file, args.input_format)
            count = 0
            for taxon in aln:
                name = (
                    taxon.id.replace(locus, "").replace("_R_", "").lstrip("_")
                )
                if name not in args.exclude:
                    try:
                        shortname = names[name]
                    except:
                        shortname = name
                    seq = str(taxon.seq).replace("-", "")
                    seq = str(seq).replace("?", "")
                    if not len(seq) == 0:
                        record = SeqRecord(
                            Seq(seq), id=shortname, name="", description=""
                        )
                        outp.write("{}".format(record.format("fasta")))
                        count += 1
                    else:
                        print(locus)
            taxon_count.append(count)
            outp.close()
        print("\n")
        print("Final taxon count = ", set(taxon_count))


if __name__ == "__main__":
    main()
