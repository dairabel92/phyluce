#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2014 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 21 June 2014 13:28 PDT (-0700)
"""

import os
import sys
import glob
import argparse
import subprocess
import multiprocessing

from Bio import AlignIO

from phyluce.log import setup_logging
from phyluce.helpers import FullPaths, CreateDir, is_dir, get_file_extensions
from phyluce.pth import get_user_path

import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Use GBLOCKS to trim existing alignments in parallel""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--alignments",
        required=True,
        action=FullPaths,
        type=is_dir,
        help="""The directory containing alignments to be trimmed.""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The directory in which to store the resulting alignments.""",
    )
    parser.add_argument(
        "--input-format",
        choices=["fasta", "nexus", "phylip", "clustal", "emboss", "stockholm"],
        default="fasta",
        help="""The input alignment format.""",
    )
    parser.add_argument(
        "--output-format",
        choices=["fasta", "nexus", "phylip", "clustal", "emboss", "stockholm"],
        default="nexus",
        help="""The output alignment format.""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""Process alignments in parallel using --cores for alignment. """
        + """This is the number of PHYSICAL CPUs.""",
    )
    args = parser.parse_args()
    return args


def get_and_trim_alignments(params):
    args, align_file = params
    name = os.path.splitext(os.path.basename(align_file))[0]
    try:
        cmd = [
            get_user_path("binaries", "trimal"),
            "-in",
            align_file,
            "-out",
            "{}-trimal".format(align_file),
            "-automated1",
            "-fasta",
        ]
        proc = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        stdout, stderr = proc.communicate()
        # read new alignment
        trimmed_aln_file = "{}-trimal".format(align_file)
        with open(trimmed_aln_file, "rU") as trimmed_aln:
            aln = AlignIO.read(trimmed_aln, "fasta")
            for seq in aln:
                seq.annotations = {"molecule_type": "DNA"}
        # remove the qblocks file
        os.remove(trimmed_aln_file)
        sys.stdout.write(".")
        sys.stdout.flush()
        return name, aln
    except ValueError as e:
        if e.message == "No records found in handle":
            return name, False
    except:
        return name, False


def write_gblocks_alignments_to_outdir(log, outdir, alignments, format):
    log.info("Writing output files")
    for tup in alignments:
        locus, aln = tup
        if aln:
            outname = "{}{}".format(
                os.path.join(outdir, locus), get_file_extensions(format)[0]
            )
            # pdb.set_trace()
            try:
                with open(outname, "w") as outf:
                    AlignIO.write(aln, outf, format)
            except ValueError:
                os.remove(outname)
                log.warn(
                    "Unable to write {} - alignment too short".format(locus)
                )
        else:
            log.warn("Missing information for locus {}".format(locus))


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    text = " Starting {} ".format(my_name)
    log.info(text.center(65, "="))
    alignments = []
    log.info("Getting aligned sequences for trimming")
    for ftype in get_file_extensions(args.input_format):
        alignments.extend(
            glob.glob(os.path.join(args.alignments, "*{}".format(ftype)))
        )
    # package up needed arguments for map()
    params = [[args, aln] for aln in alignments]
    log.info("Alignment trimming begins.")
    # if --multprocessing, use Pool.map(), else use map()
    # can also extend to MPI map, but not really needed on multicore
    # machine
    if args.cores > 1:
        assert (
            args.cores <= multiprocessing.cpu_count()
        ), "You've specified more cores than you have"
        pool = multiprocessing.Pool(args.cores - 1)
        alignments = pool.map(get_and_trim_alignments, params)
    else:
        alignments = list(map(get_and_trim_alignments, params))
    print("")
    # drop back into logging
    log.info("Alignment trimming ends")
    # write the output files
    write_gblocks_alignments_to_outdir(
        log, args.output, alignments, args.output_format
    )
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
