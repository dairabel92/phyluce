#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2015 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 21 April 2015 15:20 CDT (-0500)

--config file needs to be a raxml-formatted partition file which commonly looks
like this:

> DNA, p1 = 1-373, 118732-118996, 119348-119622, 167310-167547, 223601-223892
> DNA, p2 = 374-619

"""

import string
import argparse
import configparser

from Bio import AlignIO

from phyluce.log import setup_logging
from phyluce.helpers import FullPaths, is_file, is_dir

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Given an input phylip file and an input config file, create a PAML-formatted file (Format #1)"""
    )
    parser.add_argument(
        "--phylip-alignment",
        action=FullPaths,
        type=is_file,
        required=True,
        help="""The PATH to a PHYLIP-formatted alignment""",
    )
    parser.add_argument(
        "--config",
        action=FullPaths,
        type=is_file,
        required=True,
        help="""The PATH to a config file containing partition information  (RAxML-formatted)""",
    )
    parser.add_argument(
        "--output",
        action=FullPaths,
        required=True,
        help="""The PATH to an output file (will be PHYLIP formatted)""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


# taken from Alex Martelli: http://stackoverflow.com/questions/2819696/parsing-properties-file-in-python/2819788
class FakeSecHead(object):
    def __init__(self, fp):
        self.fp = fp
        self.sechead = "[section]\n"

    def readline(self):
        if self.sechead:
            try:
                return self.sechead
            finally:
                self.sechead = None
        else:
            return self.fp.readline()


class RelaxedSequentialPhylipWriter(AlignIO.PhylipIO.SequentialPhylipWriter):
    """Modify the phylip writer format to output interleaved, relaxed format"""

    def write_alignment(self, alignment):
        """
        Write a relaxed phylip alignment
        """
        # Check inputs
        for name in (s.id.strip() for s in alignment):
            if any(c in name for c in string.whitespace):
                raise ValueError(
                    "Whitespace not allowed in identifier: %s" % name
                )
        # Calculate a truncation length - maximum length of sequence ID plus a
        # single character for padding
        # If no sequences, set id_width to 1. super(...) call will raise a
        # ValueError
        if len(alignment) == 0:
            id_width = 2
        else:
            id_width = max((len(s.id.strip()) for s in alignment)) + 2
        AlignIO.PhylipIO.SequentialPhylipWriter.write_alignment(
            self, alignment, id_width=id_width
        )


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    aln = AlignIO.read(args.phylip_alignment, "phylip-relaxed")
    config = configparser.ConfigParser()
    config.readfp(FakeSecHead(open(args.config)))
    # get alignment length
    # aln_length = aln.get_alignment_length() - 1
    with open(args.output, "w") as outf:
        pwriter = RelaxedSequentialPhylipWriter(outf)
        for partition in config.items("section"):
            # split the coordinate string
            segments = [segment.strip() for segment in partition[1].split(",")]
            # integerify the min and max values and make then zero based
            coordinates = [
                [int(i) for i in segment.split("-")] for segment in segments
            ]
            # open an outfile:
            for k, coord in enumerate(coordinates):
                if k == 0:
                    new_align = aln[:, coord[0] - 1 : coord[1]]
                else:
                    new_align += aln[:, coord[0] - 1 : coord[1]]
            pwriter.write_alignment(new_align)
            outf.write("\n")
            log.info("Writing partition {}".format(partition))
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
