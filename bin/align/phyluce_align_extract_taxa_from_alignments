#!/usr/bin/env python
# encoding: utf-8

"""

remove_taxa_from_alignments.py

Created by Brant Faircloth on 21 September 2011 11:44 PDT (-0700).
Copyright (c) 2011 Brant C. Faircloth. All rights reserved.

PURPOSE:  Remove taxa passed on CLI from a folder of nexus alignment
files.

"""

import os
import sys
import glob
import argparse
import multiprocessing
from Bio import AlignIO
from Bio.Align import MultipleSeqAlignment
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from phyluce.log import setup_logging
from phyluce.helpers import is_dir, FullPaths, get_alignment_files, CreateDir

# import pdb


def get_args():
    parser = argparse.ArgumentParser(
        description="Create a new set of alignments from an old set of alignments by excluding or keeping certain taxa"
    )
    parser.add_argument(
        "--alignments",
        required=True,
        action=FullPaths,
        type=is_dir,
        help="The input directory containing nexus files",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="The directory in which to store the output files",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=["nexus", "newick", "fasta", "phylip"],
        default="nexus",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--output-format",
        dest="output_format",
        choices=[
            "fasta",
            "nexus",
            "phylip",
            "phylip-relaxed",
            "phylip-sequential",
            "clustal",
            "emboss",
            "stockholm",
        ],
        default="fasta",
        help="""The output alignment format""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""Process alignments in parallel using --cores for alignment. """
        + """This is the number of PHYSICAL CPUs.""",
    )
    parser.add_argument(
        "--skip-check",
        action="store_true",
        default=False,
        help="""Skip the initial taxon determination""",
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--exclude", type=str, default=[], nargs="+", help="Taxa to exclude"
    )
    group.add_argument(
        "--include", type=str, default=[], nargs="+", help="Taxa to include"
    )
    return parser.parse_args()


def get_samples_to_run(args, all_names):
    """docstring for get_samples_to_run"""
    if args.exclude:
        return set([name for name in all_names if name not in args.exclude])
    elif args.include:
        return set([name for name in all_names if name in args.include])
    else:
        return all_names


def get_all_taxon_names(log, input_format, files):
    log.info("Getting taxon names")
    taxa = set()
    for align_file in files:
        for align in AlignIO.parse(align_file, input_format):
            for taxon in list(align):
                # pdb.set_trace()
                taxa.add(taxon.name)
    return taxa


def record_formatter(seq, name):
    """return a string formatted as a biopython sequence record"""
    return SeqRecord(Seq(seq), id=name, name=name, description=name)


def worker(work):
    # pdb.set_trace()
    args, taxa_to_keep, align_file = work
    new_align = MultipleSeqAlignment([])
    for align in AlignIO.parse(align_file, args.input_format):
        for taxon in list(align):
            taxon.annotations = {"molecule_type": "DNA"}
            if taxon.name in taxa_to_keep:
                new_align.append(taxon)
    if len(new_align) > 1:
        new_name = os.path.splitext(os.path.split(align_file)[1])[
            0
        ] + ".{0}".format(args.output_format)
        outf = open(os.path.join(args.output, new_name), "w")
        AlignIO.write(new_align, outf, args.output_format)
    sys.stdout.write(".")
    sys.stdout.flush()


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    files = get_alignment_files(log, args.alignments, args.input_format)
    if not args.skip_check:
        taxa = get_all_taxon_names(log, args.input_format, files)
        taxa_to_keep = get_samples_to_run(args, taxa)
    else:
        assert (
            args.include is not None
        ), "--skip-check can only be used with args.include"
        taxa_to_keep = set(args.include)
    work = [(args, taxa_to_keep, file) for file in files]
    log.info("Excluding/Including taxa")
    sys.stdout.write("Running")
    sys.stdout.flush()
    if args.cores > 1:
        assert (
            args.cores <= multiprocessing.cpu_count()
        ), "You've specified more cores than you have"
        pool = multiprocessing.Pool(args.cores)
        pool.map(worker, work)
    else:
        list(map(worker, work))
    # end
    print("")
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
