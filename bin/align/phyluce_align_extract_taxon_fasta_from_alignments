#!/usr/bin/env python
# encoding: utf-8
"""
File: extract_taxon_data_from_alignments.py
Author: Brant Faircloth

Created by Brant Faircloth on 02 June 2012 14:06 PDT (-0700)
Copyright (c) 2012 Brant C. Faircloth. All rights reserved.

Description: Given a directory of alignments, extract those
sequence data for a single taxon and output in fasta format.

"""

import os
import sys
import argparse
from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from phyluce.helpers import is_dir, FullPaths, get_alignment_files, CreateFile

from phyluce.log import setup_logging

import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""From a set of input alignments, create a FASTA file of all sequences associated with a given taxon"""
    )
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The directory of alignments""",
    )
    parser.add_argument(
        "--taxon", required=True, type=str, help="""The taxon to extract"""
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateFile,
        help="""The output FASTA file""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=["nexus", "newick", "fasta", "phylip", "phylip-relaxed"],
        default="nexus",
        help="""The input format of the alignments""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # get input files
    files = get_alignment_files(log, args.alignments, args.input_format)
    sys.stdout.write("Running")
    sys.stdout.flush()
    with open(args.output, "w") as outf:
        for f in files:
            aln = AlignIO.read(f, args.input_format)
            locus = os.path.splitext(os.path.basename(f))[0]
            for taxon in aln:
                if taxon.id == args.taxon:
                    seq = (
                        str(taxon.seq)
                        .replace("-", "")
                        .replace("?", "")
                        .upper()
                    )
                    record = SeqRecord(
                        Seq(seq), id=locus, name="", description=""
                    )
                    if not len(seq) == 0:
                        outf.write(record.format("fasta"))
                        sys.stdout.write(".")
                        sys.stdout.flush()
                    else:
                        log.info("Could not write {}".format(locus))
    print("")
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
