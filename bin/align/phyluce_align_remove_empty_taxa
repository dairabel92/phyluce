#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2014 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 18 December 2014 11:01 CST (-0600)
"""


import os
import sys
import argparse
import multiprocessing
from Bio import AlignIO
from Bio.Align import MultipleSeqAlignment
from phyluce.helpers import is_dir, FullPaths, CreateDir, get_alignment_files
from phyluce.log import setup_logging

# import pdb


def get_args():
    parser = argparse.ArgumentParser(
        description="""Remove taxa having no data from a set of input nucleotides""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--alignments",
        type=is_dir,
        action=FullPaths,
        required=True,
        help="""The directory containing alignments to be screened.""",
    )
    parser.add_argument(
        "--output",
        action=CreateDir,
        required=True,
        help="""The directory in which to store the resulting alignments.""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=[
            "fasta",
            "nexus",
            "phylip",
            "phylip-relaxed",
            "clustal",
            "emboss",
            "stockholm",
        ],
        default="nexus",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--output-format",
        dest="output_format",
        choices=[
            "fasta",
            "nexus",
            "phylip",
            "phylip-relaxed",
            "clustal",
            "emboss",
            "stockholm",
        ],
        default="nexus",
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""Process alignments in parallel using --cores for alignment. """
        + """This is the number of PHYSICAL CPUs.""",
    )
    return parser.parse_args()


def screen_files(work):
    file, args = work
    aln = AlignIO.read(file, args.input_format)
    name = os.path.basename(file)
    new_align = MultipleSeqAlignment([])
    removed = []
    for seq in aln:
        seq.annotations = {"molecule_type": "DNA"}
        ss = set(str(seq.seq))
        if ss == {"?"} or ss == {"-"}:
            removed.append(seq.id)
        else:
            new_align.append(seq)
    outf = os.path.join(
        args.output,
        "{}.{}".format(os.path.splitext(name)[0], args.output_format),
    )
    try:
        with open(outf, "w") as outfile:
            AlignIO.write(new_align, outfile, args.output_format)
        sys.stdout.write(".")
        sys.stdout.flush()
    except ValueError:
        raise IOError("Cannot write output file.")
    return (name, removed)


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # find all alignments
    files = get_alignment_files(log, args.alignments, args.input_format)
    work = [[file, args] for file in files]
    log.info("Screening alignments for taxa with no data".format(args.cores))
    if args.cores > 1:
        assert (
            args.cores <= multiprocessing.cpu_count()
        ), "You've specified more cores than you have"
        pool = multiprocessing.Pool(args.cores)
        results = pool.map(screen_files, work)
        pool.close()
    else:
        results = list(map(screen_files, work))
    print("")
    for result in results:
        if len(result[1]) > 0:
            log.info(
                "Altered {}. Removed: {}".format(
                    result[0], ", ".join(result[1])
                )
            )
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
