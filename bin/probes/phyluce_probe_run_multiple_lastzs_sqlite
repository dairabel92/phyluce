#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
(c) 2021 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 2021-02-18 T09:56:20-06:00
"""


import os
import sys
import shutil
import sqlite3
import argparse
import subprocess

from phyluce.log import setup_logging
from phyluce.helpers import is_dir, is_file, FullPaths, CreateDir, CreateFile
from phyluce.many_lastz import multi_lastz_runner

from rich import print


# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Align a set of probes against genome sequence(s) in scaffolds or chromosomes"""
    )
    parser.add_argument(
        "--db",
        required=True,
        action=CreateFile,
        help="""The database in which to store results (also use --append if adding results to an existing database)""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The directory in which to store the LASTZ files""",
    )
    parser.add_argument(
        "--probefile",
        required=True,
        type=is_file,
        action=FullPaths,
        help="""The probe file to align against the sequences""",
    )
    parser.add_argument(
        "--chromolist",
        type=str,
        nargs="+",
        default=[],
        help="""The list of organisms with genome sequences in chromosomes""",
    )
    parser.add_argument(
        "--scaffoldlist",
        type=str,
        nargs="+",
        default=[],
        help="""The list of organisms with genome sequences in scaffolds/contigs""",
    )
    parser.add_argument(
        "--append",
        action="store_true",
        default=False,
        help="""Insert results to an existing database""",
    )
    parser.add_argument(
        "--no-dir",
        action="store_true",
        default=False,
        help="""If genome sequences are not in their own abbr. directory""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""The number of compute cores to use""",
    )
    parser.add_argument(
        "--genome-base-path",
        dest="base_path",
        type=str,
        default=None,
        help="""The base path to a directory containing genomes sequences""",
    )
    parser.add_argument(
        "--coverage",
        type=float,
        default=83.0,
        help="""The default coverage to search for using lastz""",
    )
    parser.add_argument(
        "--identity",
        type=float,
        default=92.5,
        help="""The default percent identity to search for using lastz""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    p = parser.parse_args()
    return p


def create_species_lastz_tables(cur, g):
    query = """CREATE TABLE {0} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            score INTEGER NOT NULL,
            name1 TEXT NOT NULL,
            strand1 TEXT NOT NULL,
            zstart1 INTEGER NOT NULL,
            end1 INTEGER NOT NULL,
            length1 INTEGER NOT NULL,
            name2 TEXT NOT NULL,
            strand2 TEXT NOT NULL,
            zstart2 INTEGER NOT NULL,
            end2 INTEGER NOT NULL,
            length2 INTEGER NOT NULL,
            diff TEXT NOT NULL,
            cigar TEXT NOT NULL,
            identity TEXT NOT NULL,
            percent_identity FLOAT NOT NULL,
            continuity TEXT NOT NULL,
            percent_continuity FLOAT NOT NULL,
            coverage TEXT NOT NULL,
            percent_coverage FLOAT NOT NULL)""".format(
        g
    )
    cur.execute(query)
    query = """CREATE INDEX '{0}_name2_idx' on {0}(name2)""".format(g)
    cur.execute(query)


def insert_species_to_lastz_tables(cur, g, input):
    with open(input, "rU") as data:
        rows = [tuple(line.strip().split("\t")) for line in data]
    query = """INSERT INTO {0} (score, name1, strand1, zstart1, end1,
            length1, name2, strand2, zstart2, end2, length2, diff, cigar,
            identity, percent_identity, continuity, percent_continuity,
            coverage, percent_coverage) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,
            ?,?,?,?,?,?,?)""".format(
        g
    )
    cur.executemany(query, rows)


def clean_lastz_data(dirty):
    clean = dirty + ".clean"
    with open(dirty, "r") as source:
        with open(clean, "w") as target:
            data = source.read()
            target.write(data.replace("%", ""))
    # remove the dirty file containing % signs
    os.remove(dirty)
    return clean


def create_species_table(conn, cur, append):
    if not append:
        try:
            cur.execute(
                """CREATE TABLE species (
                name TEXT PRIMARY KEY,
                description TEXT NULL,
                version TEXT NULL
                )
            """
            )
            conn.commit()
        except sqlite3.OperationalError as msg:
            if "table species already exists" in msg.message:
                inpt = eval(
                    input("Species table already exists. Replace [Y/n]? ")
                )
                if inpt == "Y":
                    cur.execute("DROP TABLE species")
                    create_species_table(conn, cur, append)
    else:
        pass


def align_against_scaffolds(log, cur, args, path):
    for g in args.scaffoldlist:
        output = os.path.abspath(
            os.path.join(
                args.output,
                "{0}_v_{1}.lastz".format(os.path.basename(args.probefile), g),
            )
        )
        target = path.format(g)
        log.info("Aligning against {} scaffolds".format(g))
        multi_lastz_runner(
            log,
            output,
            args.cores,
            target,
            args.probefile,
            True,
            args.coverage,
            args.identity,
        )
        log.info("Cleaning the LASTZ output for {}".format(g))
        clean = clean_lastz_data(output)
        if args.db:
            log.info("Creating the {} table".format(g))
            create_species_lastz_tables(cur, g)
            log.info("Inserting data to the {} table".format(g))
            insert_species_to_lastz_tables(cur, g, clean)
            cur.execute("INSERT INTO species (name) VALUES (?)", (g,))


def align_against_genomes(log, cur, args, path):
    for g in args.chromolist:
        output = os.path.abspath(
            os.path.join(
                args.output,
                "{0}_v_{1}.lastz".format(os.path.basename(args.probefile), g),
            )
        )
        target = path.format(g)
        log.info("Aligning against {} chromosomes".format(g))
        multi_lastz_runner(
            log,
            output,
            args.cores,
            target,
            args.probefile,
            False,
            args.coverage,
            args.identity,
        )
        log.info("Cleaning the LASTZ output")
        clean = clean_lastz_data(output)
        if args.db:
            log.info("Creating the {} table".format(g))
            create_species_lastz_tables(cur, g)
            log.info("Inserting data to the {} table".format(g))
            insert_species_to_lastz_tables(cur, g, clean)
            cur.execute("INSERT INTO species (name) VALUES (?)", (g,))


def check_for_all_genome_sequences(chromo, scaffold, path):
    genomes = chromo + scaffold
    for g in genomes:
        file = path.format(g)
        if not os.path.isfile(file):
            raise IOError("{} is not a file".format(file))


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # connect to the db
    conn = sqlite3.connect(args.db)
    cur = conn.cursor()
    if not args.no_dir:
        path = os.path.join("{0}".format(args.base_path), "{0}/{0}.2bit")
    else:
        path = os.path.join("{0}".format(args.base_path), "{0}.2bit")
    log.info("Checking to ensure all genome sequences exist as 2bit files")
    check_for_all_genome_sequences(args.chromolist, args.scaffoldlist, path)
    # create a species table if not exists
    log.info("Created species table")
    create_species_table(conn, cur, args.append)
    # for each genome, align the probes against the scaffold/readlist passed
    align_against_scaffolds(log, cur, args, path)
    align_against_genomes(log, cur, args, path)
    conn.commit()
    cur.close()
    conn.close()
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
