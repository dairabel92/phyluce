#!/usr/bin/env python
# encoding: utf-8

"""
easy_lastz.py

Created by Brant Faircloth on 24 March 2010 23:09 PDT (-0700).
Copyright (c) 2010 Brant Faircloth. All rights reserved.
"""

import time
import argparse

from phyluce.log import setup_logging
from phyluce import lastz
from phyluce.helpers import FullPaths, is_dir

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Run lastz in an easy way"""
    )
    parser.add_argument(
        "--target",
        required=True,
        type=str,
        action=FullPaths,
        help="""The path to the target file (2bit/fasta)""",
    )
    parser.add_argument(
        "--query",
        required=True,
        type=str,
        action=FullPaths,
        help="""The path to the query file (2bit/fasta)""",
    )
    parser.add_argument(
        "--output",
        required=True,
        type=str,
        action=FullPaths,
        help="""The path to the output file""",
    )
    parser.add_argument(
        "--identity",
        type=float,
        default=92.5,
        help="""The minimum percent identity to require for a match""",
    )
    cov_or_match = parser.add_mutually_exclusive_group(required=False)
    cov_or_match.add_argument(
        "--coverage",
        type=float,
        default=83.0,
        help="""The minimum coverage (%%) required for a match""",
    )
    cov_or_match.add_argument(
        "--min_match",
        type=int,
        default=None,
        help="""The minimum number of base pairs required for a match""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    log.info("Running lastz...")
    alignment = lastz.Align(
        args.target,
        args.query,
        args.coverage,
        args.identity,
        args.output,
        args.min_match,
    )
    lzstdout, lztstderr = alignment.run()
    if lztstderr:
        raise IOError(lztstderr)
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
