#!/usr/bin/env python
# encoding: utf-8
"""
File: get_probe_bed_from_lastz_files.py
Author: Brant Faircloth

Created by Brant Faircloth on 31 January 2013 11:01 PST (-0800)
Copyright (c) 2013 Brant C. Faircloth. All rights reserved.

Description: Given an input directory of lastz files, output a
directory of BED files giving the locus locations

"""

import os
import re
import glob
import logging
import argparse
from collections import defaultdict

from phyluce.log import setup_logging
from phyluce.helpers import FullPaths, is_dir, CreateDir
from phyluce import lastz

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""get_locus_bed_from_lastz"""
    )
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The input directory containing LASTZ files""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The output directory to hold BED-formatted files""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def write_bed_file(outf, chromo, start, end, probe):
    outf.write(
        "{0}\t{1}\t{2}\t{3}\t1000\t+\t{1}\t{2}\t100,149,237\n".format(
            chromo, start, end, probe
        )
    )


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    for file in glob.glob(os.path.join(args.alignments, "*lastz*")):
        lz = lastz.Reader(file, long_format=True)
        probes = defaultdict(list)
        # get output file name
        # outname = os.path.basename(file).split('.')[1].split('_')[-1]
        search_result = re.search(
            "_v_([A-Za-z0-9]+).lastz", os.path.basename(file)
        )
        outname = search_result.groups()[0]
        log.info("Working on {}".format(outname))
        outf = open(
            os.path.join(args.output, "{}.probe.bed".format(outname)), "w"
        )
        outf.write(
            """track name="uce-v-{0}" description="UCE probe matches to {0}" visibility=2 itemRgb="On"\n""".format(
                outname
            )
        )
        written = set([])
        for match in lz:
            probe = match.name2.split("|")[0].strip()
            probes[probe].append([match.name1, match.zstart1, match.end1])
        # pdb.set_trace()
        for probe in sorted(probes.keys()):
            for match in probes[probe]:
                chromo, start, end = match
                if probe in written:
                    log.warn("{0} may have >1 hit".format(probe))
                else:
                    written.add(probe)
                write_bed_file(outf, chromo, start, end, probe)
        outf.close()
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
