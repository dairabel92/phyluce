#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2014 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 11 April 2014 11:41 PDT (-0700)
"""


import os
import sys
import glob
import sqlite3
import argparse
from collections import defaultdict
from Bio import SeqIO

from phyluce.log import setup_logging
from phyluce.helpers import is_dir, is_file, FullPaths, CreateFile

# import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Make a table of BED file matches"""
    )
    parser.add_argument(
        "--fastas",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""A folder of fasta files.""",
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateFile,
        help="""A SQLite database to create during integration.""",
    )
    parser.add_argument(
        "--base-taxon",
        required=True,
        type=str,
        help="""The base taxon to use.""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def create_match_database(db, organisms, base):
    """Create the UCE-match database"""
    conn = sqlite3.connect(db)
    c = conn.cursor()
    c.execute("PRAGMA foreign_keys = ON")
    create_string = [org + " integer DEFAULT 0" for org in organisms]
    query = "CREATE TABLE {0} (locus text primary key, {1})".format(
        base, ", ".join(create_string)
    )
    c.execute(query)
    return conn, c


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    fastas = glob.glob(os.path.join(args.fastas, "*.fasta"))
    organisms = []
    conserved = defaultdict(list)
    log.info("Reading Fasta files...")
    for fasta in fastas:
        taxon_name = os.path.splitext(os.path.basename(fasta))[0]
        organisms.append(taxon_name)
        sys.stdout.write(taxon_name)
        sys.stdout.flush()
        with open(fasta, "rU") as fasta:
            for cnt, seq in enumerate(SeqIO.parse(fasta, "fasta")):
                if cnt % 1000 == 0:
                    sys.stdout.write(".")
                    sys.stdout.flush()
                ids = seq.id.split("|")
                locus = ids[3].split(":")[1]
                conserved[locus].append(taxon_name)
        print("")
    # create database
    log.info("Creating database")
    conn, c = create_match_database(args.output, organisms, args.base_taxon)
    log.info("Inserting results")
    for locus, taxa in list(conserved.items()):
        names = ", ".join([i for i in taxa])
        ones = ", ".join(["1"] * len(taxa))
        query = "INSERT INTO {} (locus, {}) values ('{}', {})".format(
            args.base_taxon, names, locus, ones
        )
        c.execute(query)
    conn.commit()
    conn.close()
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
