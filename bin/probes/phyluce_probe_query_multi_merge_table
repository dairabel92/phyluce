#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2014 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 11 April 2014 15:08 PDT (-0700)
"""


import os
import numpy
import sqlite3
import argparse
from collections import Counter

from phyluce.log import setup_logging
from phyluce.helpers import is_dir, FullPaths

import pdb


class SpecificCountsAction(argparse.Action):
    def __call__(self, parser, args, values, option=None):
        args.specific_counts = values
        if args.specific_counts and not args.output:
            parser.error(
                "If you request --specific-counts, you must also use --output."
            )


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Query the multimerge taxa to output matching loci"""
    )
    parser.add_argument(
        "--db", required=True, help="""The database to query"""
    )
    parser.add_argument(
        "--output",
        help="""When using --specific-counts, output a BED file of those loci""",
    )
    parser.add_argument(
        "--base-taxon",
        required=True,
        type=str,
        help="""The base taxon to use.""",
    )
    parser.add_argument(
        "--specific-counts",
        type=int,
        default=None,
        action=SpecificCountsAction,
        help="""Return data for a specific minimum number of taxa.""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use.""",
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs.""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    conn = sqlite3.connect(args.db)
    cur = conn.cursor()
    # get header names
    cur.execute("PRAGMA table_info({})".format(args.base_taxon))
    values = [str(r[1]) for r in cur.fetchall()]
    taxa = values[4:]
    log.info("Getting data...")
    if not args.specific_counts:
        # query all the data
        query = "SELECT * FROM {}".format(args.base_taxon)
        counts = numpy.zeros(len(taxa) + 1)
        for row in cur.execute(query):
            # pdb.set_trace()
            ss = sum(row[4:])
            counts[ss] += 1
        for i in range(len(taxa) + 1):
            log.info(
                "Loci shared by {} + {} taxa:\t{:,}".format(
                    args.base_taxon, i, sum(counts[i:])
                )
            )
    else:
        # query all the data
        query = "SELECT * FROM {}".format(args.base_taxon)
        c = Counter()
        with open(args.output, "w") as outf1:
            with open("{}.missing.matrix".format(args.output), "w") as outf2:
                outf2.write("{}\n".format(",".join(taxa)))
                for row in cur.execute(query):
                    if sum(row[4:]) >= args.specific_counts:
                        row_taxa = [
                            taxa[i] for i, j in enumerate(row[4:]) if j == 1
                        ]
                        c += Counter(row_taxa)
                        outf1.write(
                            "{}\t{}\t{}\n".format(row[1], row[2], row[3])
                        )
                    else:
                        outf2.write(
                            "{}\n".format(",".join([str(i) for i in row[4:]]))
                        )
        print(c)
        # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == "__main__":
    main()
